//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Product = newProductTable("recommendation", "product", "")

type productTable struct {
	mysql.Table

	// Columns
	ProductID   mysql.ColumnInteger
	Title       mysql.ColumnString
	Price       mysql.ColumnFloat
	Description mysql.ColumnString
	Category    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ProductTable struct {
	productTable

	NEW productTable
}

// AS creates new ProductTable with assigned alias
func (a ProductTable) AS(alias string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductTable with assigned schema name
func (a ProductTable) FromSchema(schemaName string) *ProductTable {
	return newProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductTable with assigned table prefix
func (a ProductTable) WithPrefix(prefix string) *ProductTable {
	return newProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductTable with assigned table suffix
func (a ProductTable) WithSuffix(suffix string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductTable(schemaName, tableName, alias string) *ProductTable {
	return &ProductTable{
		productTable: newProductTableImpl(schemaName, tableName, alias),
		NEW:          newProductTableImpl("", "new", ""),
	}
}

func newProductTableImpl(schemaName, tableName, alias string) productTable {
	var (
		ProductIDColumn   = mysql.IntegerColumn("product_id")
		TitleColumn       = mysql.StringColumn("title")
		PriceColumn       = mysql.FloatColumn("price")
		DescriptionColumn = mysql.StringColumn("description")
		CategoryColumn    = mysql.StringColumn("category")
		allColumns        = mysql.ColumnList{ProductIDColumn, TitleColumn, PriceColumn, DescriptionColumn, CategoryColumn}
		mutableColumns    = mysql.ColumnList{TitleColumn, PriceColumn, DescriptionColumn, CategoryColumn}
	)

	return productTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ProductID:   ProductIDColumn,
		Title:       TitleColumn,
		Price:       PriceColumn,
		Description: DescriptionColumn,
		Category:    CategoryColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
